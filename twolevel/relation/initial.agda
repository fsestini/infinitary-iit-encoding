{-# OPTIONS --prop --rewriting #-}

module relation.initial where

open import lib hiding (fst ; snd ; fstP ; sndP)
open import IIT.spec
open import erased.algebra
open import erased.section
-- open import erased.initial
open import predicate.algebra
open import predicate.initial
open import IIT.algebra
open import relation.algebra
open import sigma-construction
open import hoas-postulated as H

module InitRelTools
  (F‚ÇÄ) (F‚ÇÅ) (Y : DFam (Œ£-Fam F‚ÇÄ F‚ÇÅ))
  where

  rfam : DFam‚ÇÄ F‚ÇÄ
  rfam = (Œª a‚ÇÄ ‚Üí Pips (proj‚ÇÅ F‚ÇÅ a‚ÇÄ) (Œª a‚ÇÅ ‚Üí El (proj‚ÇÅ Y (pairp a‚ÇÄ a‚ÇÅ)) => U))
       , (Œª b‚ÇÄ ‚Üí Pi _ Œª a ‚Üí Pips (proj‚ÇÇ F‚ÇÅ (fstp a) b‚ÇÄ) Œª b‚ÇÅ ‚Üí Pi (El (proj‚ÇÅ Y a)) Œª a·¥∞ ‚Üí El (proj‚ÇÇ Y a a·¥∞ (pairp b‚ÇÄ b‚ÇÅ)) => U)

  m‚ÇÄ-to-rels : Morph‚ÇÄ F‚ÇÄ rfam ‚Üí RelTys (Œ£-Fam F‚ÇÄ F‚ÇÅ) Y
  m‚ÇÄ-to-rels m‚ÇÄ =
    (Œª a x ‚Üí Init-R-A (fstp a) (sndp a) x) ,
    (Œª a a·¥∞ b x ‚Üí Init-R-B a a·¥∞ (fstp b) (sndp b) x)
    where
      Init-R-A : ‚àÄ a‚ÇÄ a‚ÇÅ ‚Üí STerm (proj‚ÇÅ Y (pairp a‚ÇÄ a‚ÇÅ)) ‚Üí SType
      Init-R-A a‚ÇÄ a‚ÇÅ a·¥∞ = proj‚ÇÅ m‚ÇÄ $ a‚ÇÄ $ps a‚ÇÅ $ a·¥∞
  
      Init-R-B : ‚àÄ a a·¥∞ b‚ÇÄ b‚ÇÅ ‚Üí STerm (proj‚ÇÇ Y a a·¥∞ (pairp b‚ÇÄ b‚ÇÅ)) ‚Üí SType
      Init-R-B a a·¥∞ b‚ÇÄ b‚ÇÅ b·¥∞ = proj‚ÇÇ m‚ÇÄ $ b‚ÇÄ $ a $ps _ $ a·¥∞ $ b·¥∞

  B-to-U : (B : Base Œì Œî)
           {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} {Œ≥‚ÇÅ : Spec‚ÇÅ-Alg Œì Œ≥‚ÇÄ F‚ÇÅ}
           {Œ≥·¥∞ : Spec-DAlg Œì (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) Y}
           {p‚ÇÄ : _} {p‚ÇÅ : PTerm (Params‚ÇÅ-Alg Œî Œ≥‚ÇÄ p‚ÇÄ F‚ÇÅ)}
           {a‚ÇÄ : _} (a‚ÇÅ : PTerm (Base‚ÇÅ-Alg B Œ≥‚ÇÄ p‚ÇÄ a‚ÇÄ F‚ÇÅ))
           {p·¥∞ : STerm (Params-DAlg Œî Œ≥·¥∞ (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ))}
         ‚Üí STerm (Base-DAlg B Œ≥·¥∞ p·¥∞ (Œ£-Base B Œ≥‚ÇÅ p‚ÇÅ a‚ÇÄ a‚ÇÅ))
         ‚Üí Term (Base‚ÇÄ-DAlg B a‚ÇÄ rfam) ‚Üí Term U
  B-to-U ty1 a‚ÇÅ a·¥∞ R-A = R-A $ps a‚ÇÅ $ a·¥∞
  B-to-U {Œì = Œì} {Œî} (ty2 t) {Œ≥‚ÇÄ} {Œ≥‚ÇÅ} {Œ≥·¥∞} {p‚ÇÄ} {p‚ÇÅ} {b‚ÇÄ} b‚ÇÅ {p·¥∞} b·¥∞ R-B =
    R-B $ a $ps b‚ÇÅ-need $ a·¥∞ $ b·¥∞
    where
      a = Tm-Alg t (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ)
      a·¥∞ = Tm-DAlg t Œ≥·¥∞ p·¥∞
      e = cong fstp (Œ£-Tm' t {Œ≥‚ÇÅ = Œ≥‚ÇÅ} p‚ÇÄ p‚ÇÅ)
      b‚ÇÅ-need = transp-P (Œª z ‚Üí PTerm (proj‚ÇÇ F‚ÇÅ z b‚ÇÄ)) (from-‚â° (sym e)) b‚ÇÅ

  T-to-U : (B : Ty Œì Œî)
           {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} {Œ≥‚ÇÅ : Spec‚ÇÅ-Alg Œì Œ≥‚ÇÄ F‚ÇÅ}
           {Œ≥·¥∞ : Spec-DAlg Œì (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) Y} {p‚ÇÄ : _} {p‚ÇÅ : _} {a‚ÇÄ : _}
         ‚Üí (a‚ÇÅ : PTerm (Ty‚ÇÅ-Alg B Œ≥‚ÇÄ p‚ÇÄ a‚ÇÄ F‚ÇÅ))
           {p·¥∞ : STerm (Params-DAlg Œî Œ≥·¥∞ (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ))}
         ‚Üí STerm (Ty-DAlg B Œ≥·¥∞ p·¥∞ (Œ£-Ty B Œ≥‚ÇÅ p‚ÇÅ a‚ÇÄ a‚ÇÅ))
         ‚Üí Term (Ty‚ÇÄ-DAlg B a‚ÇÄ rfam)
         ‚Üí Term U
  T-to-U (ext x) a‚ÇÅ a·¥∞ ad‚ÇÄ = ùüôU
  T-to-U (base x) = B-to-U x
  T-to-U (Œ† A B) f‚ÇÅ f·¥∞ fd‚ÇÄ = PiU A (Œª a ‚Üí B-to-U B (f‚ÇÅ $p a) (f·¥∞ $ a) (fd‚ÇÄ $ a))
  T-to-U (B [ œÉ ]) a‚ÇÅ a·¥∞ ad‚ÇÄ = T-to-U B a‚ÇÅ a·¥∞ ad‚ÇÄ
  T-to-U (B [ w ]') a‚ÇÅ a·¥∞ ad‚ÇÄ = T-to-U B a‚ÇÅ a·¥∞ ad‚ÇÄ

  P-to-U : (Œî : Params Œì)
           {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} {Œ≥‚ÇÅ : Spec‚ÇÅ-Alg Œì Œ≥‚ÇÄ F‚ÇÅ}
           {Œ≥·¥∞ : Spec-DAlg Œì (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) Y} {p‚ÇÄ : _} {p‚ÇÅ : _} 
         ‚Üí STerm (Params-DAlg Œî Œ≥·¥∞ (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ))
         ‚Üí Term (Params‚ÇÄ-DAlg Œî p‚ÇÄ rfam)
         ‚Üí Term U
  P-to-U ‚óè p·¥∞ pd‚ÇÄ = ùüôU
  P-to-U (Œî ‚Ä£‚Ä£ A) p·¥∞ pd‚ÇÄ =
    SigmaU (P-to-U Œî (fst p·¥∞) (fst pd‚ÇÄ)) Œª _ ‚Üí T-to-U A _ (snd p·¥∞) (snd pd‚ÇÄ)
  P-to-U (Œî [ x ]p) p·¥∞ pd‚ÇÄ = P-to-U Œî p·¥∞ pd‚ÇÄ

  to-B-R : (w : Wk Œ© Œì) (A : Base Œì Œî) {m‚ÇÄ : _}
           {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} {Œ≥‚ÇÅ : Spec‚ÇÅ-Alg Œì Œ≥‚ÇÄ F‚ÇÅ}
           {Œ≥·¥∞ : Spec-DAlg Œì (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) Y}
           {p‚ÇÄ : _} {p‚ÇÅ : _} {pd : STerm (Params-DAlg Œî Œ≥·¥∞ (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ))}
           {a‚ÇÄ : _} {a‚ÇÅ : _} (ad : STerm (Base-DAlg A Œ≥·¥∞ pd (Œ£-Base A Œ≥‚ÇÅ p‚ÇÅ a‚ÇÄ a‚ÇÅ)))
         ‚Üí B-to-U A {p‚ÇÄ = p‚ÇÄ} a‚ÇÅ ad (Base‚ÇÄ-Sect A a‚ÇÄ m‚ÇÄ) ‚â° Base-R-Alg A _ ad (m‚ÇÄ-to-rels m‚ÇÄ)
  to-B-R w ty1 x = refl
  to-B-R w (ty2 x‚ÇÅ) x = refl

  to-T-R : (w : Wk Œ© Œì) (A : Ty Œì Œî) {m‚ÇÄ : _}
           {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} {Œ≥‚ÇÅ : Spec‚ÇÅ-Alg Œì Œ≥‚ÇÄ F‚ÇÅ}
           {Œ≥·¥∞ : Spec-DAlg Œì (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) Y}
           {p‚ÇÄ : _} {p‚ÇÅ : _} {pd : STerm (Params-DAlg Œî Œ≥·¥∞ (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ))}
           {a‚ÇÄ : _} {a‚ÇÅ : _} (ad : STerm (Ty-DAlg A Œ≥·¥∞ pd (Œ£-Ty A Œ≥‚ÇÅ p‚ÇÅ a‚ÇÄ a‚ÇÅ)))
         ‚Üí T-to-U A {p‚ÇÄ = p‚ÇÄ} a‚ÇÅ ad (Ty‚ÇÄ-Sect A a‚ÇÄ m‚ÇÄ) ‚â° Ty-R-Alg A _ ad (m‚ÇÄ-to-rels m‚ÇÄ)
  to-T-R w (ext x) ad = refl
  to-T-R w (base x) ad = to-B-R w x ad
  to-T-R w (Œ† A B) fd = cong (PiU A) (funext (Œª a ‚Üí to-B-R w B (fd $ a)))
  to-T-R w (A [ x ]) ad = to-T-R w A ad
  to-T-R w (A [ w' ]') ad = to-T-R (w ‚àòw w') A ad
  
  to-P-R : (w : Wk Œ© Œì) (Œî : Params Œì) {m‚ÇÄ : _}
           {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} {Œ≥‚ÇÅ : Spec‚ÇÅ-Alg Œì Œ≥‚ÇÄ F‚ÇÅ}
           {Œ≥·¥∞ : Spec-DAlg Œì (Œ£-Spec Œì Œ≥‚ÇÄ Œ≥‚ÇÅ) Y}
           {p‚ÇÄ : _} {p‚ÇÅ : _} (pd : STerm (Params-DAlg Œî Œ≥·¥∞ (Œ£-Params Œî Œ≥‚ÇÅ p‚ÇÄ p‚ÇÅ)))
         ‚Üí P-to-U Œî pd (Params‚ÇÄ-Sect Œî p‚ÇÄ m‚ÇÄ) ‚â° Params-R-Alg Œî _ pd (m‚ÇÄ-to-rels m‚ÇÄ)
  to-P-R w ‚óè pd = refl
  to-P-R w (Œî ‚Ä£‚Ä£ A) pd =
    trans (cong (Œª z ‚Üí SigmaU z (Œª _ ‚Üí T-to-U A _ _ _)) (to-P-R w Œî (fst pd)))
          (cong (SigmaU _) (funext (Œª _ ‚Üí to-T-R w A (snd pd))))
  to-P-R w (Œî [ w' ]p) pd = to-P-R (w ‚àòw w') Œî pd
  {-# REWRITE to-P-R #-}

module InitialRel {F‚ÇÄ}
  (Œ©) (œâ‚ÇÄ : Spec‚ÇÄ-Alg Œ© F‚ÇÄ) (init‚ÇÄ : is-initial‚ÇÄ œâ‚ÇÄ)
  (Y)
  where

  open InitPred Œ© œâ‚ÇÄ init‚ÇÄ
  open InitRelTools F‚ÇÄ preds Y

  private
    F‚ÇÅ = preds
    Œ£F = Œ£-Fam F‚ÇÄ F‚ÇÅ
    œâ‚ÇÅ : Spec‚ÇÅ-Alg Œ© œâ‚ÇÄ preds
    œâ‚ÇÅ = init-is-pred-alg

  module _ (œâ·¥∞ : Spec-DAlg Œ© (Œ£-Spec Œ© œâ‚ÇÄ œâ‚ÇÅ) Y) where

    r-dalg : Spec‚ÇÄ-DAlg Œ© œâ‚ÇÄ rfam
    r-dalg {ctor Œî ty1} c = lam Œª p‚ÇÄ ‚Üí lam Œª pd‚ÇÄ ‚Üí lamps Œª a‚ÇÅ ‚Üí lam Œª a·¥∞ ‚Üí
      let p‚ÇÅ = pred-inv c p‚ÇÄ a‚ÇÅ
          Œî·¥∞-ty = Params-DAlg Œî œâ·¥∞ (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ)
      in SigmaU Œî·¥∞-ty Œª p·¥∞ ‚Üí SigmaU (P-to-U Œî p·¥∞ pd‚ÇÄ) Œª _ ‚Üí
         LiftP (H.Id (proj‚ÇÅ Y _) a·¥∞ (CtorTm-DAlg c œâ·¥∞ $ _ $ p·¥∞))
    r-dalg {ctor Œî (ty2 t)} c =
      lam Œª p‚ÇÄ ‚Üí lam Œª pd‚ÇÄ ‚Üí lam Œª a ‚Üí lamps Œª b‚ÇÅ ‚Üí
        let
            e = pred-ix-inv c p‚ÇÄ (fstp a) b‚ÇÅ
            T : STerm (proj‚ÇÅ F‚ÇÄ) ‚Üí Type
            T a‚ÇÄ = Pips _ Œª a‚ÇÅ ‚Üí Pips _ Œª p ‚Üí Pi (El (proj‚ÇÅ Y (pairp a‚ÇÄ a‚ÇÅ))) Œª a·¥∞
              ‚Üí El (proj‚ÇÇ Y _ a·¥∞ (pairp (CtorTm‚ÇÄ-Alg c œâ‚ÇÄ $ p‚ÇÄ) p)) => U
            aux : Term (T (Tm‚ÇÄ-Alg t œâ‚ÇÄ p‚ÇÄ))
            aux = lamps Œª a‚ÇÅ ‚Üí lamps Œª b‚ÇÅ ‚Üí lam Œª a·¥∞ ‚Üí lam Œª b·¥∞ ‚Üí 
              let p‚ÇÅ = pred-inv c p‚ÇÄ b‚ÇÅ
                  Œî·¥∞-ty = Params-DAlg Œî œâ·¥∞ (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ)
              in SigmaU Œî·¥∞-ty Œª p·¥∞ ‚Üí SigmaU (P-to-U Œî {p‚ÇÅ = p‚ÇÅ} p·¥∞ pd‚ÇÄ) Œª _ ‚Üí
                   LiftP (SigmaP (H.Id (proj‚ÇÅ Y _) a·¥∞ (Tm-DAlg t œâ·¥∞ p·¥∞)) Œª e ‚Üí
                          H.Id (proj‚ÇÇ Y _ _ _)
                               (Transp (Œª z ‚Üí El (proj‚ÇÇ Y _ z _)) e b·¥∞)
                               (CtorTm-DAlg c œâ·¥∞ $ _ $ p·¥∞))
        in Transp T (Sym e) aux $ps sndp a $ps b‚ÇÅ

    the-init = init‚ÇÄ r-dalg
    m‚ÇÄ = lib.fst the-init

    Init-R-A : ‚àÄ a‚ÇÄ a‚ÇÅ ‚Üí STerm (proj‚ÇÅ Y (pairp a‚ÇÄ a‚ÇÅ)) ‚Üí SType
    Init-R-A a‚ÇÄ a‚ÇÅ a·¥∞ = proj‚ÇÅ (lib.fst the-init) $ a‚ÇÄ $ps a‚ÇÅ $ a·¥∞

    Init-R-B : ‚àÄ a a·¥∞ b‚ÇÄ b‚ÇÅ ‚Üí STerm (proj‚ÇÇ Y a a·¥∞ (pairp b‚ÇÄ b‚ÇÅ)) ‚Üí SType
    Init-R-B a a·¥∞ b‚ÇÄ b‚ÇÅ b·¥∞ = proj‚ÇÇ (lib.fst the-init) $ b‚ÇÄ $ a $ps _ $ a·¥∞ $ b·¥∞

    init-rels : RelTys Œ£F Y
    init-rels = m‚ÇÄ-to-rels m‚ÇÄ

    private

      Init-R-A-‚â° : (c : CtorTm Œ© (ctor Œî ty1)) (p‚ÇÄ : _) (x : _) (y : _)
                 ‚Üí Init-R-A (CtorTm‚ÇÄ-Alg c œâ‚ÇÄ $ p‚ÇÄ) x y ‚â° (r-dalg c $ p‚ÇÄ $ Params‚ÇÄ-Sect Œî p‚ÇÄ m‚ÇÄ $ps x $ y)
      Init-R-A-‚â° c p‚ÇÄ x y rewrite to-‚â° (lib.snd the-init c p‚ÇÄ) = refl

      Init-R-B-‚â° : ‚àÄ{t} (c : CtorTm Œ© (ctor Œî (ty2 t))) (p‚ÇÄ : _) (a : _) (a·¥∞ : _) (z : _) (w : _)
                 ‚Üí Init-R-B a a·¥∞ (CtorTm‚ÇÄ-Alg c œâ‚ÇÄ $ p‚ÇÄ) z w
                 ‚â° (r-dalg c $ p‚ÇÄ $ Params‚ÇÄ-Sect Œî p‚ÇÄ m‚ÇÄ $ a $ps z $ a·¥∞ $ w)
      Init-R-B-‚â° c p‚ÇÄ a a·¥∞ _ _ rewrite to-‚â° (lib.snd the-init c p‚ÇÄ) = refl

      init-rel-alg-aux : ‚àÄ{Œî} (t : Tm Œ© Œî (base ty1)) (c : CtorTm Œ© (ctor Œî (ty2 t)))
               (p‚ÇÄ : STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ)) (p‚ÇÅ : PTerm (Params‚ÇÅ-Alg Œî œâ‚ÇÄ p‚ÇÄ F‚ÇÅ))
               (p·¥∞ : STerm (Params-DAlg Œî œâ·¥∞ (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ))) (pr : STerm (Params-R-Alg Œî _ p·¥∞ init-rels))
             ‚Üí STerm (Init-R-B _ (Tm-DAlg t œâ·¥∞ p·¥∞) (CtorTm‚ÇÄ-Alg c œâ‚ÇÄ $ p‚ÇÄ) _ (CtorTm-DAlg c œâ·¥∞ $ _ $ p·¥∞))
      init-rel-alg-aux {Œî = Œî} t c p‚ÇÄ p‚ÇÅ p·¥∞ pr =
        subst (Œª x ‚Üí STerm x) (sym (Init-R-B-‚â° c p‚ÇÄ _ _ _ _)) aux
        where
          aux : STerm (r-dalg c $ p‚ÇÄ $ Params‚ÇÄ-Sect Œî _ m‚ÇÄ $ _ $ps _ $ Tm-DAlg t œâ·¥∞ p·¥∞ $ (CtorTm-DAlg c œâ·¥∞ $ _ $ p·¥∞))
          aux = pair p·¥∞ (pair pr (liftP (pairP (Refl _) (Refl _))))

    init-rel-alg : Spec-R-Alg Œ© _ œâ·¥∞ init-rels
    init-rel-alg {ctor Œî ty1} c = lam Œª p ‚Üí lam Œª p·¥∞ ‚Üí lam Œª pr ‚Üí
      let p‚ÇÄ = Œ£-Params-fst Œî œâ‚ÇÅ p
          true-goal : STerm (r-dalg c $ p‚ÇÄ $ Params‚ÇÄ-Sect Œî _ m‚ÇÄ $ps _ $ (CtorTm-DAlg c œâ·¥∞ $ p $ p·¥∞))
          true-goal = pair p·¥∞ (pair pr (liftP (Refl _)))
          goal : STerm (Init-R-A (CtorTm‚ÇÄ-Alg c œâ‚ÇÄ $ p‚ÇÄ) _ (CtorTm-DAlg c œâ·¥∞ $ p $ p·¥∞))
          goal = subst' STerm (sym (Init-R-A-‚â° c p‚ÇÄ _ _)) true-goal
      in goal
    init-rel-alg {ctor Œî (ty2 t)} c = lam Œª p ‚Üí lam Œª p·¥∞ ‚Üí lam Œª pr ‚Üí
        let p‚ÇÄ = Œ£-Params-fst Œî œâ‚ÇÅ p
            p‚ÇÅ = Œ£-Params-snd Œî œâ‚ÇÅ p
        in init-rel-alg-aux t c p‚ÇÄ p‚ÇÅ p·¥∞ pr

    R-A-inv-Params
      : (c : CtorTm Œ© (ctor Œî ty1)) {p‚ÇÄ : _} (p‚ÇÅ : _) {a·¥∞ : _} 
      ‚Üí STerm (Init-R-A (CtorTm‚ÇÄ-Alg c œâ‚ÇÄ $ p‚ÇÄ) (CtorTm‚ÇÅ-Alg c œâ‚ÇÅ $p p‚ÇÄ $P p‚ÇÅ) a·¥∞)
      ‚Üí STerm (SigmaU (Params-DAlg Œî œâ·¥∞ (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ))
                      (Œª p·¥∞ ‚Üí Params-R-Alg Œî (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ) p·¥∞ init-rels))
    R-A-inv-Params {Œî = Œî} c {p‚ÇÄ} p‚ÇÅ {a·¥∞} r-a =
      pair (fst aux) (fst (snd aux))
      where aux = subst' STerm (Init-R-A-‚â° c p‚ÇÄ _ a·¥∞) r-a

    R-A-inv-Params-‚â°
      : ‚àÄ{Œî}(c : CtorTm Œ© (ctor Œî ty1)) {p‚ÇÄ : _} (p‚ÇÅ : _)
        (p·¥∞ : STerm (Params-DAlg Œî œâ·¥∞ (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ)))
        (pr : STerm (Params-R-Alg Œî (Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ) p·¥∞ init-rels))
      ‚Üí R-A-inv-Params c p‚ÇÅ (CtorTm-R-Alg c init-rel-alg $ Œ£-Params Œî œâ‚ÇÅ p‚ÇÄ p‚ÇÅ $ p·¥∞ $ pr)
      ‚â° pair p·¥∞ pr
    R-A-inv-Params-‚â° {Œî} c {p‚ÇÄ} p‚ÇÅ p·¥∞ pr = refl

    R-A-constraint
      : (c : CtorTm Œ© (ctor Œî ty1)) (p‚ÇÄ : _) (p‚ÇÅ : _) (a·¥∞ : _)
      ‚Üí (r : STerm (Init-R-A _ (CtorTm‚ÇÅ-Alg c œâ‚ÇÅ $p p‚ÇÄ $P p‚ÇÅ) a·¥∞))
      ‚Üí PTerm (H.Id (proj‚ÇÅ Y _) a·¥∞ (CtorTm-DAlg c œâ·¥∞ $ _ $ fst (R-A-inv-Params c p‚ÇÅ r)))
    R-A-constraint c p‚ÇÄ p‚ÇÅ a·¥∞ r-a = unliftP (snd (snd aux))
      where aux = subst' STerm (Init-R-A-‚â° c p‚ÇÄ _ a·¥∞) r-a
