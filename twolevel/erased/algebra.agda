{-# OPTIONS --prop --rewriting --allow-unsolved-metas #-}

module erased.algebra where

open import lib hiding (fst ; snd)
open import IIT.spec
open import IIT.algebra
open import hoas-postulated

Fam‚ÇÄ : Set
Fam‚ÇÄ = SType √ó SType

DFam‚ÇÄ : Fam‚ÇÄ ‚Üí Set
DFam‚ÇÄ (A , B) = (STerm A -> Type) √ó (STerm B -> Type)

Spec‚ÇÄ-Alg : Spec ‚Üí Fam‚ÇÄ ‚Üí Set
Ctor‚ÇÄ-Alg : Ctor Œì ‚Üí Fam‚ÇÄ ‚Üí SType
Params‚ÇÄ-Alg : Params Œì ‚Üí Fam‚ÇÄ ‚Üí SType
Ty‚ÇÄ-Alg : Ty Œì Œî ‚Üí Fam‚ÇÄ ‚Üí SType
Base‚ÇÄ-Alg : Base Œì Œî ‚Üí Fam‚ÇÄ ‚Üí SType

Spec‚ÇÄ-Alg init _ = ‚ä§
Spec‚ÇÄ-Alg (Œì ‚Ä£ A) F‚ÇÄ = Spec‚ÇÄ-Alg Œì F‚ÇÄ √ó STerm (Ctor‚ÇÄ-Alg A F‚ÇÄ)
  
Ctor‚ÇÄ-Alg (ctor Œî A) F‚ÇÄ = Params‚ÇÄ-Alg Œî F‚ÇÄ =>U Base‚ÇÄ-Alg A F‚ÇÄ

Params‚ÇÄ-Alg ‚óè _ = ùüôU
Params‚ÇÄ-Alg (Œî ‚Ä£‚Ä£ A) F‚ÇÄ = PairU (Params‚ÇÄ-Alg Œî F‚ÇÄ) (Ty‚ÇÄ-Alg A F‚ÇÄ)
Params‚ÇÄ-Alg (Œî [ x ]p) F‚ÇÄ = Params‚ÇÄ-Alg Œî F‚ÇÄ

Ty‚ÇÄ-Alg (ext A) _ = A
Ty‚ÇÄ-Alg (base b) = Base‚ÇÄ-Alg b
Ty‚ÇÄ-Alg (Œ† A B) F‚ÇÄ = A =>U Base‚ÇÄ-Alg B F‚ÇÄ
Ty‚ÇÄ-Alg (A [ _ ]) = Ty‚ÇÄ-Alg A
Ty‚ÇÄ-Alg (A [ _ ]') = Ty‚ÇÄ-Alg A

Base‚ÇÄ-Alg ty1 F‚ÇÄ = proj‚ÇÅ F‚ÇÄ
Base‚ÇÄ-Alg (ty2 _) F‚ÇÄ = proj‚ÇÇ F‚ÇÄ

Base‚ÇÄ-Alg[]b' : (A : Base Œì Œî) (w : Wk Œ© Œì) ‚Üí Base‚ÇÄ-Alg (A [ w ]b') ‚â° Base‚ÇÄ-Alg A
Base‚ÇÄ-Alg[]b' ty1 w = refl
Base‚ÇÄ-Alg[]b' (ty2 x) w = refl
{-# REWRITE Base‚ÇÄ-Alg[]b' #-}

module _ {F‚ÇÄ} where

  Tm‚ÇÄ-Alg : Tm Œì Œî A ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ) ‚Üí STerm (Ty‚ÇÄ-Alg A F‚ÇÄ)
  CtorTm‚ÇÄ-Alg : CtorTm Œì C ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí STerm (Ctor‚ÇÄ-Alg C F‚ÇÄ)
  Wk‚ÇÄ-Alg : Wk Œì Œ© ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí Spec‚ÇÄ-Alg Œ© F‚ÇÄ
  Sub‚ÇÄ-Alg : Sub {Œì} Œî ‚àá ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ) ‚Üí STerm (Params‚ÇÄ-Alg ‚àá F‚ÇÄ)
  
  Sub‚ÇÄ-Alg Id _ ps = ps
  Sub‚ÇÄ-Alg (Ext œÉ t) x ps = pair (Sub‚ÇÄ-Alg œÉ x ps) (Tm‚ÇÄ-Alg t x ps)
  Sub‚ÇÄ-Alg Drop x ps = fst ps
  Sub‚ÇÄ-Alg (œÉ ‚àò œÑ) x ps = Sub‚ÇÄ-Alg œÑ x (Sub‚ÇÄ-Alg œÉ x ps)
  Sub‚ÇÄ-Alg (œÉ [ w ]ws) x ps = Sub‚ÇÄ-Alg œÉ (Wk‚ÇÄ-Alg w x) ps
  
  Wk‚ÇÄ-Alg Id x = x
  Wk‚ÇÄ-Alg Drop x = proj‚ÇÅ x
  Wk‚ÇÄ-Alg (w ‚àòw w‚ÇÅ) x = Wk‚ÇÄ-Alg w‚ÇÅ (Wk‚ÇÄ-Alg w x)
  
  Tm‚ÇÄ-Alg vz Œ≥ p = snd p
  Tm‚ÇÄ-Alg vz1 Œ≥ p = snd p
  Tm‚ÇÄ-Alg (vs t) Œ≥ p = Tm‚ÇÄ-Alg t Œ≥ (fst p)
  Tm‚ÇÄ-Alg (ext A x) Œ≥ p = x
  Tm‚ÇÄ-Alg (ctor x œÉ) Œ≥ p = app (CtorTm‚ÇÄ-Alg x Œ≥) (Sub‚ÇÄ-Alg œÉ Œ≥ p)
  Tm‚ÇÄ-Alg (ctor-1 x œÉ) Œ≥ p = app (CtorTm‚ÇÄ-Alg x Œ≥) (Sub‚ÇÄ-Alg œÉ Œ≥ p)
  Tm‚ÇÄ-Alg (App t) Œ≥ p = app (Tm‚ÇÄ-Alg t Œ≥ (fst p)) (snd p)
  Tm‚ÇÄ-Alg (Lam t) Œ≥ p = lam Œª n ‚Üí Tm‚ÇÄ-Alg t Œ≥ (pair p n)
  Tm‚ÇÄ-Alg (t [ œÉ ]tm) Œ≥ p = Tm‚ÇÄ-Alg t Œ≥ (Sub‚ÇÄ-Alg œÉ Œ≥ p)
  Tm‚ÇÄ-Alg (t [ w ]tm') Œ≥ p = Tm‚ÇÄ-Alg t (Wk‚ÇÄ-Alg w Œ≥) p
  Tm‚ÇÄ-Alg (t [ w ]tm'-1) Œ≥ p = Tm‚ÇÄ-Alg t (Wk‚ÇÄ-Alg w Œ≥) p
  Tm‚ÇÄ-Alg (App-U t f) Œ≥ p = app f (Tm‚ÇÄ-Alg t Œ≥ p)
  
  -- Ctor‚ÇÄ-Alg[]c : (C : Ctor Œì) (w : Wk Œ© Œì) ‚Üí Ctor‚ÇÄ-Alg (C [ w ]c) ‚â° Ctor‚ÇÄ-Alg C
  -- Ctor‚ÇÄ-Alg[]c (ctor Œî x) w = refl
--  {-# REWRITE Ctor‚ÇÄ-Alg[]c #-}
  
  CtorTm‚ÇÄ-Alg v0c x = proj‚ÇÇ x
  CtorTm‚ÇÄ-Alg (dropc c) x = CtorTm‚ÇÄ-Alg c (proj‚ÇÅ x)
  CtorTm‚ÇÄ-Alg (_[_]ctm c w) x = CtorTm‚ÇÄ-Alg c (Wk‚ÇÄ-Alg w x)
  
Spec‚ÇÄ-Alg' : Spec ‚Üí Fam‚ÇÄ ‚Üí Set
Spec‚ÇÄ-Alg' Œì F = ‚àÄ{C} ‚Üí CtorTm Œì C ‚Üí STerm (Ctor‚ÇÄ-Alg C F)

to-Spec‚ÇÄ-Alg : ‚àÄ {Œì F} ‚Üí Spec‚ÇÄ-Alg' Œì F ‚Üí Spec‚ÇÄ-Alg Œì F
to-Spec‚ÇÄ-Alg {init} Œ≥ = tt
to-Spec‚ÇÄ-Alg {Œì ‚Ä£ x} Œ≥ = (to-Spec‚ÇÄ-Alg {Œì} (Œª c ‚Üí Œ≥ (c [ Drop ]ctm))) , Œ≥ v0c



module _ {F‚ÇÄ} where

  Spec‚ÇÄ-DAlg : ‚àÄ Œì (Œ≥ : Spec‚ÇÄ-Alg Œì F‚ÇÄ) ‚Üí DFam‚ÇÄ F‚ÇÄ ‚Üí Set
  Ctor‚ÇÄ-DAlg : (A : Ctor Œì) -> STerm (Ctor‚ÇÄ-Alg A F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí Type
  Ty‚ÇÄ-DAlg : (A : Ty Œì Œî) ‚Üí STerm (Ty‚ÇÄ-Alg A F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí Type
  Base‚ÇÄ-DAlg : (A : Base Œì Œî) ‚Üí STerm (Base‚ÇÄ-Alg A F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí Type
  Params‚ÇÄ-DAlg : (Œî : Params Œì) ‚Üí STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí Type

  Spec‚ÇÄ-DAlg Œì Œ≥ F‚ÇÄ·¥∞ =
    (‚àÄ{A} (c : CtorTm Œì A) ‚Üí Term (Ctor‚ÇÄ-DAlg A (CtorTm‚ÇÄ-Alg c Œ≥) F‚ÇÄ·¥∞))
  
  Ctor‚ÇÄ-DAlg (ctor Œî A) f F‚ÇÄ·¥∞ =
    Pi _ Œª p ‚Üí Params‚ÇÄ-DAlg Œî p F‚ÇÄ·¥∞ => Base‚ÇÄ-DAlg A (app f p) F‚ÇÄ·¥∞
  
  Ty‚ÇÄ-DAlg (ext X) x _ = El X
  Ty‚ÇÄ-DAlg (base b) = Base‚ÇÄ-DAlg b
  Ty‚ÇÄ-DAlg (Œ† A B) y F‚ÇÄ·¥∞ = Pi (El A) Œª n ‚Üí Base‚ÇÄ-DAlg B (app y n) F‚ÇÄ·¥∞
  Ty‚ÇÄ-DAlg (A [ _ ]) = Ty‚ÇÄ-DAlg A
  Ty‚ÇÄ-DAlg (A [ _ ]') = Ty‚ÇÄ-DAlg A
  
  Params‚ÇÄ-DAlg ‚óè h _ = Unit
  Params‚ÇÄ-DAlg (Œî ‚Ä£‚Ä£ A) p F‚ÇÄ·¥∞ = Pair (Params‚ÇÄ-DAlg Œî (fst p) F‚ÇÄ·¥∞) (Ty‚ÇÄ-DAlg A (snd p) F‚ÇÄ·¥∞)
  Params‚ÇÄ-DAlg (Œî [ _ ]p) = Params‚ÇÄ-DAlg Œî
  
  Base‚ÇÄ-DAlg ty1 a F‚ÇÄ·¥∞ = proj‚ÇÅ F‚ÇÄ·¥∞ a
  Base‚ÇÄ-DAlg (ty2 _) a F‚ÇÄ·¥∞ = proj‚ÇÇ F‚ÇÄ·¥∞ a
  
module _ {F‚ÇÄ} {F‚ÇÄ·¥∞ : DFam‚ÇÄ F‚ÇÄ} where

  CtorTm‚ÇÄ-DAlg : (c : CtorTm Œì C) {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} (Œ≥d‚ÇÄ : Spec‚ÇÄ-DAlg Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞)
               ‚Üí Term (Ctor‚ÇÄ-DAlg C (CtorTm‚ÇÄ-Alg c Œ≥‚ÇÄ) F‚ÇÄ·¥∞)
  Tm‚ÇÄ-DAlg : ‚àÄ{Œ≥‚ÇÄ} (t : Tm Œì Œî A) (Œ≥d‚ÇÄ : Spec‚ÇÄ-DAlg Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞)
             {p : _} (pd : Term (Params‚ÇÄ-DAlg Œî p F‚ÇÄ·¥∞))
           ‚Üí Term (Ty‚ÇÄ-DAlg A (Tm‚ÇÄ-Alg t Œ≥‚ÇÄ p) F‚ÇÄ·¥∞)
  Wk‚ÇÄ-DAlg : ‚àÄ{Œ≥‚ÇÄ} (w : Wk Œ© Œì) ‚Üí Spec‚ÇÄ-DAlg Œ© Œ≥‚ÇÄ F‚ÇÄ·¥∞
           ‚Üí Spec‚ÇÄ-DAlg Œì (Wk‚ÇÄ-Alg w Œ≥‚ÇÄ) F‚ÇÄ·¥∞
  Sub‚ÇÄ-DAlg : ‚àÄ{Œ≥‚ÇÄ} (œÉ : Sub {Œì} Œî ‚àá) ‚Üí Spec‚ÇÄ-DAlg Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞
            ‚Üí {p‚ÇÄ : STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ)} ‚Üí Term (Params‚ÇÄ-DAlg Œî p‚ÇÄ F‚ÇÄ·¥∞)
            ‚Üí Term (Params‚ÇÄ-DAlg ‚àá (Sub‚ÇÄ-Alg œÉ Œ≥‚ÇÄ p‚ÇÄ) F‚ÇÄ·¥∞)

  CtorTm‚ÇÄ-DAlg c Œ≥d‚ÇÄ = Œ≥d‚ÇÄ c

  Sub‚ÇÄ-DAlg Id x p = p
  Sub‚ÇÄ-DAlg (Ext œÉ t) x p = pair (Sub‚ÇÄ-DAlg œÉ x p) (Tm‚ÇÄ-DAlg t x p)
  Sub‚ÇÄ-DAlg Drop x p = fst p
  Sub‚ÇÄ-DAlg (œÉ ‚àò œÑ) x p = Sub‚ÇÄ-DAlg œÑ x (Sub‚ÇÄ-DAlg œÉ x p)
  Sub‚ÇÄ-DAlg (œÉ [ w ]ws) x p = Sub‚ÇÄ-DAlg œÉ (Wk‚ÇÄ-DAlg w x) p
  
  Tm‚ÇÄ-DAlg vz Œ¥ p = snd p
  Tm‚ÇÄ-DAlg vz1 Œ¥ p = snd p
  Tm‚ÇÄ-DAlg (vs t) Œ¥ p = Tm‚ÇÄ-DAlg t Œ¥ (fst p)
  Tm‚ÇÄ-DAlg (ext A x) Œ¥ p = x
  Tm‚ÇÄ-DAlg (ctor x œÉ) Œ¥ p = CtorTm‚ÇÄ-DAlg x Œ¥ $ _ $ Sub‚ÇÄ-DAlg œÉ Œ¥ p
  Tm‚ÇÄ-DAlg (ctor-1 x œÉ) Œ¥ p = CtorTm‚ÇÄ-DAlg x Œ¥ $ _ $ Sub‚ÇÄ-DAlg œÉ Œ¥ p
  Tm‚ÇÄ-DAlg (App t) Œ¥ {p‚ÇÄ} p = app (Tm‚ÇÄ-DAlg t Œ¥ (fst p)) (snd p‚ÇÄ)
  Tm‚ÇÄ-DAlg (Lam t) Œ¥ p = lam Œª n ‚Üí Tm‚ÇÄ-DAlg t Œ¥ (pair p n)
  Tm‚ÇÄ-DAlg (t [ œÉ ]tm) Œ¥ p = Tm‚ÇÄ-DAlg t Œ¥ (Sub‚ÇÄ-DAlg œÉ Œ¥ p)
  Tm‚ÇÄ-DAlg (t [ w ]tm') Œ¥ p = Tm‚ÇÄ-DAlg t (Wk‚ÇÄ-DAlg w Œ¥) p
  Tm‚ÇÄ-DAlg (t [ w ]tm'-1) Œ¥ p = Tm‚ÇÄ-DAlg t (Wk‚ÇÄ-DAlg w Œ¥) p
  Tm‚ÇÄ-DAlg (App-U t f) Œ≥d‚ÇÄ pd‚ÇÄ = app f (Tm‚ÇÄ-DAlg t Œ≥d‚ÇÄ pd‚ÇÄ)

  Base‚ÇÄ-DAlg[]b'
    : (A : Base Œì Œî) (w : Wk Œ© Œì) (a : STerm (Base‚ÇÄ-Alg A F‚ÇÄ))
    ‚Üí Base‚ÇÄ-DAlg (A [ w ]b') a F‚ÇÄ·¥∞ ‚â° Base‚ÇÄ-DAlg A a F‚ÇÄ·¥∞
  Base‚ÇÄ-DAlg[]b' ty1 w a = refl
  Base‚ÇÄ-DAlg[]b' (ty2 x) w a = refl
  {-# REWRITE Base‚ÇÄ-DAlg[]b' #-}

  -- Ctor‚ÇÄ-DAlg[]c
  --   : (C : Ctor Œì) (w : Wk Œ© Œì) (c : STerm (Ctor‚ÇÄ-Alg C F‚ÇÄ))
  --   ‚Üí Ctor‚ÇÄ-DAlg (C [ w ]c) c F‚ÇÄ·¥∞ ‚â° Ctor‚ÇÄ-DAlg C c F‚ÇÄ·¥∞
  -- Ctor‚ÇÄ-DAlg[]c (ctor Œî x) w c = refl
  -- {-# REWRITE Ctor‚ÇÄ-DAlg[]c #-}
  
  Wk‚ÇÄ-DAlg w f c = f (c [ w ]ctm)
