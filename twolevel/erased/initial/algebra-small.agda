{-# OPTIONS --prop --rewriting --allow-unsolved-metas #-}

module erased.initial.algebra-small where

open import lib hiding (fst ; snd)
open import IIT.spec
open import IIT.algebra
open import hoas-postulated

Fam‚ÇÄ : Set
Fam‚ÇÄ = SType √ó SType

DFam‚ÇÄ : Fam‚ÇÄ ‚Üí Set
DFam‚ÇÄ (A , B) = (STerm A -> SType) √ó (STerm B -> SType)

Spec‚ÇÄ-Alg : Spec ‚Üí Fam‚ÇÄ ‚Üí Set
Ctor‚ÇÄ-Alg : Ctor Œì ‚Üí Fam‚ÇÄ ‚Üí SType
Params‚ÇÄ-Alg : Params Œì ‚Üí Fam‚ÇÄ ‚Üí SType
Ty‚ÇÄ-Alg : Ty Œì Œî ‚Üí Fam‚ÇÄ ‚Üí SType
Base‚ÇÄ-Alg : Base Œì Œî ‚Üí Fam‚ÇÄ ‚Üí SType

Spec‚ÇÄ-Alg init _ = ‚ä§
Spec‚ÇÄ-Alg (Œì ‚Ä£ A) F‚ÇÄ = Spec‚ÇÄ-Alg Œì F‚ÇÄ √ó STerm (Ctor‚ÇÄ-Alg A F‚ÇÄ)
  
Ctor‚ÇÄ-Alg (ctor Œî A) F‚ÇÄ = Params‚ÇÄ-Alg Œî F‚ÇÄ =>U Base‚ÇÄ-Alg A F‚ÇÄ

Params‚ÇÄ-Alg ‚óè _ = ùüôU
Params‚ÇÄ-Alg (Œî ‚Ä£‚Ä£ A) F‚ÇÄ = PairU (Params‚ÇÄ-Alg Œî F‚ÇÄ) (Ty‚ÇÄ-Alg A F‚ÇÄ)
Params‚ÇÄ-Alg (Œî [ x ]p) F‚ÇÄ = Params‚ÇÄ-Alg Œî F‚ÇÄ

Ty‚ÇÄ-Alg (ext A) _ = A
Ty‚ÇÄ-Alg (base b) = Base‚ÇÄ-Alg b
Ty‚ÇÄ-Alg (Œ† A B) F‚ÇÄ = A =>U Base‚ÇÄ-Alg B F‚ÇÄ
Ty‚ÇÄ-Alg (A [ _ ]) = Ty‚ÇÄ-Alg A
Ty‚ÇÄ-Alg (A [ _ ]') = Ty‚ÇÄ-Alg A

Base‚ÇÄ-Alg ty1 F‚ÇÄ = proj‚ÇÅ F‚ÇÄ
Base‚ÇÄ-Alg (ty2 _) F‚ÇÄ = proj‚ÇÇ F‚ÇÄ

Base‚ÇÄ-Alg[]b' : (A : Base Œì Œî) (w : Wk Œ© Œì) ‚Üí Base‚ÇÄ-Alg (A [ w ]b') ‚â° Base‚ÇÄ-Alg A
Base‚ÇÄ-Alg[]b' ty1 w = refl
Base‚ÇÄ-Alg[]b' (ty2 x) w = refl
{-# REWRITE Base‚ÇÄ-Alg[]b' #-}

module _ {F‚ÇÄ} where

  Tm‚ÇÄ-Alg : Tm Œì Œî A ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ) ‚Üí STerm (Ty‚ÇÄ-Alg A F‚ÇÄ)
  CtorTm‚ÇÄ-Alg : CtorTm Œì C ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí STerm (Ctor‚ÇÄ-Alg C F‚ÇÄ)
  Wk‚ÇÄ-Alg : Wk Œì Œ© ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí Spec‚ÇÄ-Alg Œ© F‚ÇÄ
  Sub‚ÇÄ-Alg : Sub {Œì} Œî ‚àá ‚Üí Spec‚ÇÄ-Alg Œì F‚ÇÄ ‚Üí STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ) ‚Üí STerm (Params‚ÇÄ-Alg ‚àá F‚ÇÄ)
  
  Sub‚ÇÄ-Alg Id _ ps = ps
  Sub‚ÇÄ-Alg (Ext œÉ t) x ps = pair (Sub‚ÇÄ-Alg œÉ x ps) (Tm‚ÇÄ-Alg t x ps)
  Sub‚ÇÄ-Alg Drop x ps = fst ps
  Sub‚ÇÄ-Alg (œÉ ‚àò œÑ) x ps = Sub‚ÇÄ-Alg œÑ x (Sub‚ÇÄ-Alg œÉ x ps)
  Sub‚ÇÄ-Alg (œÉ [ w ]ws) x ps = Sub‚ÇÄ-Alg œÉ (Wk‚ÇÄ-Alg w x) ps
  
  Wk‚ÇÄ-Alg Id x = x
  Wk‚ÇÄ-Alg Drop x = proj‚ÇÅ x
  Wk‚ÇÄ-Alg (w ‚àòw w‚ÇÅ) x = Wk‚ÇÄ-Alg w‚ÇÅ (Wk‚ÇÄ-Alg w x)
  
  Tm‚ÇÄ-Alg vz Œ≥ p = snd p
  Tm‚ÇÄ-Alg vz1 Œ≥ p = snd p
  Tm‚ÇÄ-Alg (vs t) Œ≥ p = Tm‚ÇÄ-Alg t Œ≥ (fst p)
  Tm‚ÇÄ-Alg (ext A x) Œ≥ p = x
  Tm‚ÇÄ-Alg (ctor x œÉ) Œ≥ p = app (CtorTm‚ÇÄ-Alg x Œ≥) (Sub‚ÇÄ-Alg œÉ Œ≥ p)
  Tm‚ÇÄ-Alg (ctor-1 x œÉ) Œ≥ p = app (CtorTm‚ÇÄ-Alg x Œ≥) (Sub‚ÇÄ-Alg œÉ Œ≥ p)
  Tm‚ÇÄ-Alg (App t) Œ≥ p = app (Tm‚ÇÄ-Alg t Œ≥ (fst p)) (snd p)
  Tm‚ÇÄ-Alg (Lam t) Œ≥ p = lam Œª n ‚Üí Tm‚ÇÄ-Alg t Œ≥ (pair p n)
  Tm‚ÇÄ-Alg (t [ œÉ ]tm) Œ≥ p = Tm‚ÇÄ-Alg t Œ≥ (Sub‚ÇÄ-Alg œÉ Œ≥ p)
  Tm‚ÇÄ-Alg (t [ w ]tm') Œ≥ p = Tm‚ÇÄ-Alg t (Wk‚ÇÄ-Alg w Œ≥) p
  Tm‚ÇÄ-Alg (t [ w ]tm'-1) Œ≥ p = Tm‚ÇÄ-Alg t (Wk‚ÇÄ-Alg w Œ≥) p
  Tm‚ÇÄ-Alg (App-U t f) Œ≥ p = app f (Tm‚ÇÄ-Alg t Œ≥ p)
  
  -- Ctor‚ÇÄ-Alg[]c : (C : Ctor Œì) (w : Wk Œ© Œì) ‚Üí Ctor‚ÇÄ-Alg (C [ w ]c) ‚â° Ctor‚ÇÄ-Alg C
  -- Ctor‚ÇÄ-Alg[]c (ctor Œî x) w = refl
--  {-# REWRITE Ctor‚ÇÄ-Alg[]c #-}
  
  CtorTm‚ÇÄ-Alg v0c x = proj‚ÇÇ x
  CtorTm‚ÇÄ-Alg (dropc c) x = CtorTm‚ÇÄ-Alg c (proj‚ÇÅ x)
  CtorTm‚ÇÄ-Alg (_[_]ctm c w) x = CtorTm‚ÇÄ-Alg c (Wk‚ÇÄ-Alg w x)
  
Spec‚ÇÄ-Alg' : Spec ‚Üí Fam‚ÇÄ ‚Üí Set
Spec‚ÇÄ-Alg' Œì F = ‚àÄ{C} ‚Üí CtorTm Œì C ‚Üí STerm (Ctor‚ÇÄ-Alg C F)

to-Spec‚ÇÄ-Alg : ‚àÄ {Œì F} ‚Üí Spec‚ÇÄ-Alg' Œì F ‚Üí Spec‚ÇÄ-Alg Œì F
to-Spec‚ÇÄ-Alg {init} Œ≥ = tt
to-Spec‚ÇÄ-Alg {Œì ‚Ä£ x} Œ≥ = (to-Spec‚ÇÄ-Alg {Œì} (Œª c ‚Üí Œ≥ (c [ Drop ]ctm))) , Œ≥ v0c

to-Spec‚ÇÄ-Alg' : ‚àÄ {Œì F} ‚Üí Spec‚ÇÄ-Alg Œì F ‚Üí Spec‚ÇÄ-Alg' Œì F
to-Spec‚ÇÄ-Alg' Œ≥ c = CtorTm‚ÇÄ-Alg c Œ≥

-- postulate
--   to-Spec‚ÇÄ-Alg-lemma :
--     ‚àÄ {F} Œì C (c : CtorTm Œì C) (Œ≥ : Spec‚ÇÄ-Alg' Œì F)
--     ‚Üí CtorTm‚ÇÄ-Alg c (to-Spec‚ÇÄ-Alg Œ≥) ‚â° Œ≥ c
-- {-# REWRITE to-Spec‚ÇÄ-Alg-lemma #-}

-- to-Spec‚ÇÄ-Alg-lemma _ _ v0c Œ≥ = refl
-- to-Spec‚ÇÄ-Alg-lemma _ _ (dropc c) Œ≥ = {!ih!}
--   where ih = to-Spec‚ÇÄ-Alg-lemma _ _ c Œª x ‚Üí Œ≥ (x [ Drop ]ctm)
-- to-Spec‚ÇÄ-Alg-lemma _ _ (c [ w ]ctm) Œ≥ = {!!}

module _ {F‚ÇÄ} where

  Spec‚ÇÄ-DAlg : ‚àÄ Œì (Œ≥ : Spec‚ÇÄ-Alg Œì F‚ÇÄ) ‚Üí DFam‚ÇÄ F‚ÇÄ ‚Üí Set
  Spec‚ÇÄ-DAlg' : ‚àÄ Œì (Œ≥ : Spec‚ÇÄ-Alg' Œì F‚ÇÄ) ‚Üí DFam‚ÇÄ F‚ÇÄ ‚Üí Set
  Ctor‚ÇÄ-DAlg : (A : Ctor Œì) -> STerm (Ctor‚ÇÄ-Alg A F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí SType
  Ty‚ÇÄ-DAlg : (A : Ty Œì Œî) ‚Üí STerm (Ty‚ÇÄ-Alg A F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí SType
  Base‚ÇÄ-DAlg : (A : Base Œì Œî) ‚Üí STerm (Base‚ÇÄ-Alg A F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí SType
  Params‚ÇÄ-DAlg : (Œî : Params Œì) ‚Üí STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ) -> DFam‚ÇÄ F‚ÇÄ ‚Üí SType

  Spec‚ÇÄ-DAlg Œì Œ≥ F‚ÇÄ·¥∞ =
    (‚àÄ{A} (c : CtorTm Œì A) ‚Üí STerm (Ctor‚ÇÄ-DAlg A (CtorTm‚ÇÄ-Alg c Œ≥) F‚ÇÄ·¥∞))
  
  Spec‚ÇÄ-DAlg' Œì Œ≥ x = ‚àÄ{C} (c : CtorTm Œì C) ‚Üí STerm (Ctor‚ÇÄ-DAlg C (Œ≥ c) x)

  -- Spec‚ÇÄ-DAlg' init Œ≥ x = ‚ä§
  -- Spec‚ÇÄ-DAlg' (Œì ‚Ä£ C) Œ≥ x =
  --     Spec‚ÇÄ-DAlg' Œì (Œª c ‚Üí Œ≥ (dropc c)) x
  --   √ó STerm (Ctor‚ÇÄ-DAlg C (Œ≥ v0c) x)

  Ctor‚ÇÄ-DAlg (ctor Œî A) f F‚ÇÄ·¥∞ =
    PiU (Params‚ÇÄ-Alg Œî F‚ÇÄ) Œª p ‚Üí Params‚ÇÄ-DAlg Œî p F‚ÇÄ·¥∞ =>U Base‚ÇÄ-DAlg A (app f p) F‚ÇÄ·¥∞
  
  Ty‚ÇÄ-DAlg (ext X) x _ = X
  Ty‚ÇÄ-DAlg (base b) = Base‚ÇÄ-DAlg b
  Ty‚ÇÄ-DAlg (Œ† A B) y F‚ÇÄ·¥∞ = PiU A Œª n ‚Üí Base‚ÇÄ-DAlg B (app y n) F‚ÇÄ·¥∞
  Ty‚ÇÄ-DAlg (A [ _ ]) = Ty‚ÇÄ-DAlg A
  Ty‚ÇÄ-DAlg (A [ _ ]') = Ty‚ÇÄ-DAlg A
  
  Params‚ÇÄ-DAlg ‚óè h _ = ùüôU
  Params‚ÇÄ-DAlg (Œî ‚Ä£‚Ä£ A) p F‚ÇÄ·¥∞ = PairU (Params‚ÇÄ-DAlg Œî (fst p) F‚ÇÄ·¥∞) (Ty‚ÇÄ-DAlg A (snd p) F‚ÇÄ·¥∞)
  Params‚ÇÄ-DAlg (Œî [ _ ]p) = Params‚ÇÄ-DAlg Œî
  
  Base‚ÇÄ-DAlg ty1 a F‚ÇÄ·¥∞ = proj‚ÇÅ F‚ÇÄ·¥∞ a
  Base‚ÇÄ-DAlg (ty2 _) a F‚ÇÄ·¥∞ = proj‚ÇÇ F‚ÇÄ·¥∞ a
  
  -- Spec‚ÇÄ-DAlg' Œì Œ≥ D = ‚àÄ {C} (c : CtorTm Œì C) ‚Üí STerm (Ctor‚ÇÄ-DAlg C (Œ≥ c) D)

  -- to-Spec‚ÇÄ-DAlg : ‚àÄ D Œì (Œ≥ : Spec‚ÇÄ-Alg' Œì F‚ÇÄ) ‚Üí Spec‚ÇÄ-DAlg' Œì Œ≥ D
  --               ‚Üí Spec‚ÇÄ-DAlg Œì (to-Spec‚ÇÄ-Alg Œ≥) D
  -- to-Spec‚ÇÄ-DAlg D Œì Œ≥ Œ≥d c = Œ≥d c

  Spec‚ÇÄ-DAlg-ind : ‚àÄ Œì (Œ≥ : Spec‚ÇÄ-Alg Œì F‚ÇÄ) ‚Üí DFam‚ÇÄ F‚ÇÄ ‚Üí Set
  Spec‚ÇÄ-DAlg-ind init Œ≥ D = ‚ä§
  Spec‚ÇÄ-DAlg-ind (Œì ‚Ä£ C) (Œ≥ , c) D = Spec‚ÇÄ-DAlg-ind Œì Œ≥ D √ó STerm (Ctor‚ÇÄ-DAlg C c D)

module _ {F‚ÇÄ} {F‚ÇÄ·¥∞ : DFam‚ÇÄ F‚ÇÄ} where

  CtorTm‚ÇÄ-DAlg : (c : CtorTm Œì C) {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} (Œ≥d‚ÇÄ : Spec‚ÇÄ-DAlg Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞)
               ‚Üí STerm (Ctor‚ÇÄ-DAlg C (CtorTm‚ÇÄ-Alg c Œ≥‚ÇÄ) F‚ÇÄ·¥∞)
  -- CtorTm‚ÇÄ-DAlg' : (c : CtorTm Œì C) {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg' Œì F‚ÇÄ} (Œ≥d‚ÇÄ : Spec‚ÇÄ-DAlg' Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞)
  --              ‚Üí STerm (Ctor‚ÇÄ-DAlg C (Œ≥‚ÇÄ c) F‚ÇÄ·¥∞)
  -- Wk‚ÇÄ-DAlg : ‚àÄ{Œ≥‚ÇÄ} (w : Wk Œ© Œì) ‚Üí Spec‚ÇÄ-DAlg Œ© Œ≥‚ÇÄ F‚ÇÄ·¥∞
  --          ‚Üí Spec‚ÇÄ-DAlg Œì (Wk‚ÇÄ-Alg w Œ≥‚ÇÄ) F‚ÇÄ·¥∞
  -- Wk‚ÇÄ-DAlg' : {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg' Œ© F‚ÇÄ} (w : Wk Œ© Œì) ‚Üí Spec‚ÇÄ-DAlg' Œ© Œ≥‚ÇÄ F‚ÇÄ·¥∞
  --          ‚Üí Spec‚ÇÄ-DAlg' Œì (Œª x ‚Üí Œ≥‚ÇÄ (x [ w ]ctm)) F‚ÇÄ·¥∞
  -- Wk‚ÇÄ-DAlg-ind : ‚àÄ{Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œ© F‚ÇÄ} (w : Wk Œ© Œì) ‚Üí Spec‚ÇÄ-DAlg-ind Œ© Œ≥‚ÇÄ F‚ÇÄ·¥∞
  --          ‚Üí Spec‚ÇÄ-DAlg-ind Œì (Wk‚ÇÄ-Alg w Œ≥‚ÇÄ) F‚ÇÄ·¥∞
  -- Sub‚ÇÄ-DAlg : ‚àÄ{Œ≥‚ÇÄ} (œÉ : Sub {Œì} Œî ‚àá) ‚Üí Spec‚ÇÄ-DAlg Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞
  --           ‚Üí {p‚ÇÄ : STerm (Params‚ÇÄ-Alg Œî F‚ÇÄ)} ‚Üí STerm (Params‚ÇÄ-DAlg Œî p‚ÇÄ F‚ÇÄ·¥∞)
  --           ‚Üí STerm (Params‚ÇÄ-DAlg ‚àá (Sub‚ÇÄ-Alg œÉ Œ≥‚ÇÄ p‚ÇÄ) F‚ÇÄ·¥∞)

  CtorTm‚ÇÄ-DAlg c Œ≥d‚ÇÄ = Œ≥d‚ÇÄ c

   -- CtorTm‚ÇÄ-DAlg-ind c {!!}

  -- Sub‚ÇÄ-DAlg Id x p = p
  -- Sub‚ÇÄ-DAlg (Ext œÉ t) x p = pair (Sub‚ÇÄ-DAlg œÉ x p) (Tm‚ÇÄ-DAlg t x p)
  -- Sub‚ÇÄ-DAlg Drop x p = fst p
  -- Sub‚ÇÄ-DAlg (œÉ ‚àò œÑ) x p = Sub‚ÇÄ-DAlg œÑ x (Sub‚ÇÄ-DAlg œÉ x p)
  -- Sub‚ÇÄ-DAlg (œÉ [ w ]ws) x p = Sub‚ÇÄ-DAlg œÉ (Wk‚ÇÄ-DAlg w x) p
  
  -- Tm‚ÇÄ-DAlg vz Œ¥ p = snd p
  -- Tm‚ÇÄ-DAlg vz1 Œ¥ p = snd p
  -- Tm‚ÇÄ-DAlg (vs t) Œ¥ p = Tm‚ÇÄ-DAlg t Œ¥ (fst p)
  -- Tm‚ÇÄ-DAlg (ext A x) Œ¥ p = x
  -- Tm‚ÇÄ-DAlg (ctor x œÉ) Œ¥ p = CtorTm‚ÇÄ-DAlg x Œ¥ $ _ $ Sub‚ÇÄ-DAlg œÉ Œ¥ p
  -- Tm‚ÇÄ-DAlg (ctor-1 x œÉ) Œ¥ p = CtorTm‚ÇÄ-DAlg x Œ¥ $ _ $ Sub‚ÇÄ-DAlg œÉ Œ¥ p
  -- Tm‚ÇÄ-DAlg (App t) Œ¥ {p‚ÇÄ} p = app (Tm‚ÇÄ-DAlg t Œ¥ (fst p)) (snd p‚ÇÄ)
  -- Tm‚ÇÄ-DAlg (Lam t) Œ¥ p = lam Œª n ‚Üí Tm‚ÇÄ-DAlg t Œ¥ (pair p n)
  -- Tm‚ÇÄ-DAlg (t [ œÉ ]tm) Œ¥ p = Tm‚ÇÄ-DAlg t Œ¥ (Sub‚ÇÄ-DAlg œÉ Œ¥ p)
  -- Tm‚ÇÄ-DAlg (t [ w ]tm') Œ¥ p = Tm‚ÇÄ-DAlg t (Wk‚ÇÄ-DAlg w Œ¥) p
  -- Tm‚ÇÄ-DAlg (t [ w ]tm'-1) Œ¥ p = Tm‚ÇÄ-DAlg t (Wk‚ÇÄ-DAlg w Œ¥) p
  -- Tm‚ÇÄ-DAlg (App-U t f) Œ≥d‚ÇÄ pd‚ÇÄ = app f (Tm‚ÇÄ-DAlg t Œ≥d‚ÇÄ pd‚ÇÄ)

  Base‚ÇÄ-DAlg[]b'
    : (A : Base Œì Œî) (w : Wk Œ© Œì) (a : STerm (Base‚ÇÄ-Alg A F‚ÇÄ))
    ‚Üí Base‚ÇÄ-DAlg (A [ w ]b') a F‚ÇÄ·¥∞ ‚â° Base‚ÇÄ-DAlg A a F‚ÇÄ·¥∞
  Base‚ÇÄ-DAlg[]b' ty1 w a = refl
  Base‚ÇÄ-DAlg[]b' (ty2 x) w a = refl
  {-# REWRITE Base‚ÇÄ-DAlg[]b' #-}

  -- Ctor‚ÇÄ-DAlg[]c
  --   : (C : Ctor Œì) (w : Wk Œ© Œì) (c : STerm (Ctor‚ÇÄ-Alg C F‚ÇÄ))
  --   ‚Üí Ctor‚ÇÄ-DAlg (C [ w ]c) c F‚ÇÄ·¥∞ ‚â° Ctor‚ÇÄ-DAlg C c F‚ÇÄ·¥∞
  -- Ctor‚ÇÄ-DAlg[]c (ctor Œî x) w c = refl
  -- {-# REWRITE Ctor‚ÇÄ-DAlg[]c #-}
  
  -- Wk‚ÇÄ-DAlg w f c = f (c [ w ]ctm)

  -- CtorTm‚ÇÄ-DAlg-ind
  --   : (c : CtorTm Œì C) {Œ≥‚ÇÄ : Spec‚ÇÄ-Alg Œì F‚ÇÄ} (Œ≥d‚ÇÄ : Spec‚ÇÄ-DAlg-ind Œì Œ≥‚ÇÄ F‚ÇÄ·¥∞)
  --   ‚Üí STerm (Ctor‚ÇÄ-DAlg C (CtorTm‚ÇÄ-Alg c Œ≥‚ÇÄ) F‚ÇÄ·¥∞)
  -- CtorTm‚ÇÄ-DAlg-ind v0c Œ≥d‚ÇÄ = proj‚ÇÇ Œ≥d‚ÇÄ
  -- CtorTm‚ÇÄ-DAlg-ind (dropc c) Œ≥d‚ÇÄ = CtorTm‚ÇÄ-DAlg-ind c (proj‚ÇÅ Œ≥d‚ÇÄ)
  -- CtorTm‚ÇÄ-DAlg-ind (c [ w ]ctm) Œ≥d‚ÇÄ = CtorTm‚ÇÄ-DAlg-ind c (Wk‚ÇÄ-DAlg-ind w Œ≥d‚ÇÄ)


  -- Wk‚ÇÄ-DAlg' Wk.Id x = x
  -- Wk‚ÇÄ-DAlg' Drop x = proj‚ÇÅ x
  -- Wk‚ÇÄ-DAlg' (w ‚àòw w') x = Wk‚ÇÄ-DAlg' w' (Wk‚ÇÄ-DAlg' w x)

  -- CtorTm‚ÇÄ-DAlg' v0c Œ≥d‚ÇÄ = proj‚ÇÇ Œ≥d‚ÇÄ
  -- CtorTm‚ÇÄ-DAlg' (dropc c) Œ≥d‚ÇÄ = CtorTm‚ÇÄ-DAlg' c (proj‚ÇÅ Œ≥d‚ÇÄ)
  -- CtorTm‚ÇÄ-DAlg' (c [ w ]ctm) Œ≥d‚ÇÄ = CtorTm‚ÇÄ-DAlg' c (Wk‚ÇÄ-DAlg' w Œ≥d‚ÇÄ)

  -- Wk‚ÇÄ-DAlg-ind Wk.Id x = x
  -- Wk‚ÇÄ-DAlg-ind Drop x = proj‚ÇÅ x
  -- Wk‚ÇÄ-DAlg-ind (w ‚àòw w') x = Wk‚ÇÄ-DAlg-ind w' (Wk‚ÇÄ-DAlg-ind w x)

{-# REWRITE [Id]p [Id]b' [‚àò]p-‚â° [‚àò]b'-‚â° #-}

-- postulate
--   [Id]ctm-‚â° : ‚àÄ{Œì C} {c : CtorTm Œì C} ‚Üí c [ Wk.Id ]ctm ‚â° c
--   [‚àò]ctm-‚â° : ‚àÄ{Œì Œ© ‚àá} (w : Wk Œì Œ©) (w' : Wk Œ© ‚àá) (C : Ctor ‚àá) (c : CtorTm ‚àá C)
--            ‚Üí c [ w' ]ctm [ w ]ctm ‚â° c [ w ‚àòw w' ]ctm
--   [Drop]ctm-‚â° : ‚àÄ{C'} (c : CtorTm Œì C) ‚Üí c [ Drop {Œì} {C'} ]ctm ‚â° dropc c

{-# REWRITE [Id]ctm-‚â° [‚àò]ctm-‚â° [Drop]ctm-‚â° #-}

to-Spec‚ÇÄ-Alg-wk
  : ‚àÄ{F} (w : Wk Œì Œ©) (Œ≥ : Spec‚ÇÄ-Alg' Œì F)
  ‚Üí Wk‚ÇÄ-Alg w (to-Spec‚ÇÄ-Alg Œ≥) ‚â° to-Spec‚ÇÄ-Alg Œª c ‚Üí Œ≥ (c [ w ]ctm)
to-Spec‚ÇÄ-Alg-wk Wk.Id Œ≥ = refl
to-Spec‚ÇÄ-Alg-wk Drop Œ≥ = refl
to-Spec‚ÇÄ-Alg-wk (w ‚àòw w') Œ≥ =
  trans (cong (Wk‚ÇÄ-Alg w') (to-Spec‚ÇÄ-Alg-wk w Œ≥)) (to-Spec‚ÇÄ-Alg-wk w' _)
{-# REWRITE to-Spec‚ÇÄ-Alg-wk #-}

module _ {F‚ÇÄ} {F‚ÇÄ·¥∞ : DFam‚ÇÄ F‚ÇÄ} where

  CtorTm‚ÇÄ-Alg-‚â°
    : (c : CtorTm Œì C) (Œ≥‚ÇÄ : Spec‚ÇÄ-Alg' Œì F‚ÇÄ)
    ‚Üí CtorTm‚ÇÄ-Alg c (to-Spec‚ÇÄ-Alg Œ≥‚ÇÄ) ‚â° Œ≥‚ÇÄ c
  CtorTm‚ÇÄ-Alg-‚â° v0c Œ≥‚ÇÄ = refl
  CtorTm‚ÇÄ-Alg-‚â° (dropc c) Œ≥‚ÇÄ = CtorTm‚ÇÄ-Alg-‚â° c Œª x ‚Üí Œ≥‚ÇÄ (dropc x)
  CtorTm‚ÇÄ-Alg-‚â° (c [ w ]ctm) Œ≥‚ÇÄ = CtorTm‚ÇÄ-Alg-‚â° c _
  {-# REWRITE CtorTm‚ÇÄ-Alg-‚â° #-}

  to-Spec‚ÇÄ-DAlg' : ‚àÄ Œì (Œ≥ : Spec‚ÇÄ-Alg' Œì F‚ÇÄ)
                 ‚Üí Spec‚ÇÄ-DAlg Œì (to-Spec‚ÇÄ-Alg Œ≥) F‚ÇÄ·¥∞
                 ‚Üí Spec‚ÇÄ-DAlg' Œì Œ≥ F‚ÇÄ·¥∞
  to-Spec‚ÇÄ-DAlg' Œì Œ≥ Œ≥d c = Œ≥d c
  -- to-Spec‚ÇÄ-DAlg' init Œ≥ Œ≥d = tt
  -- to-Spec‚ÇÄ-DAlg' (Œì ‚Ä£ C) Œ≥ Œ≥d =
  --   to-Spec‚ÇÄ-DAlg' Œì _ (Œª c ‚Üí Œ≥d (dropc c)) , Œ≥d v0c

-- CtorTm‚ÇÄ-DAlg'-‚â°
--   : ‚àÄ{F‚ÇÄ F‚ÇÄ·¥∞} (c : CtorTm Œì C) (Œ≥‚ÇÄ : Spec‚ÇÄ-Alg' Œì F‚ÇÄ)
--   ‚Üí (Œ≥d‚ÇÄ : Spec‚ÇÄ-DAlg Œì (to-Spec‚ÇÄ-Alg Œ≥‚ÇÄ) F‚ÇÄ·¥∞)
--   ‚Üí CtorTm‚ÇÄ-DAlg' c (to-Spec‚ÇÄ-DAlg' Œì Œ≥‚ÇÄ Œ≥d‚ÇÄ)
--   ‚â°  CtorTm‚ÇÄ-DAlg {F‚ÇÄ} {F‚ÇÄ·¥∞} c {to-Spec‚ÇÄ-Alg Œ≥‚ÇÄ} Œ≥d‚ÇÄ
-- CtorTm‚ÇÄ-DAlg'-‚â° v0c Œ≥‚ÇÄ Œ≥d‚ÇÄ = refl
-- CtorTm‚ÇÄ-DAlg'-‚â° (dropc c) Œ≥‚ÇÄ Œ≥d‚ÇÄ = CtorTm‚ÇÄ-DAlg'-‚â° c _ (Œª c' ‚Üí Œ≥d‚ÇÄ (dropc c'))
-- CtorTm‚ÇÄ-DAlg'-‚â° (c [ w ]ctm) Œ≥‚ÇÄ Œ≥d‚ÇÄ = {!CtorTm‚ÇÄ-DAlg'-‚â° c ? ?!}
-- {-# REWRITE CtorTm‚ÇÄ-DAlg'-‚â° #-}

